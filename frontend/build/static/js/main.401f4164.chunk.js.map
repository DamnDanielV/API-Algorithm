{"version":3,"sources":["components/Explain.js","components/Algorithm.js","index.js"],"names":["Explain","className","Algorithm","useState","numberFound","setNumberFound","message","setMessage","choice","setChoice","arrayRef","createRef","onClick","onSubmit","e","preventDefault","axios","post","numbers","current","value","headers","then","response","data","index","catch","error","method","ref","name","ReactDOM","render","document","getElementById"],"mappings":"uKAEaA,EAAU,WACrB,OACE,qBAAKC,UAAU,MAAf,SAEE,sBAAKA,UAAU,+BAAf,UACI,qBAAKA,UAAU,cAAf,SAA6B,wDAC7B,qBAAKA,UAAU,YAAf,SAEE,mBAAGA,UAAU,YAAb,0uBCkFGC,EAxFG,WAAO,IAAD,EACgBC,mBAAS,GADzB,mBACfC,EADe,KACFC,EADE,OAEQF,mBAAS,IAFjB,mBAEfG,EAFe,KAENC,EAFM,OAGMJ,oBAAS,GAHf,mBAGfK,EAHe,KAGPC,EAHO,KAIhBC,EAAWC,sBAiCjB,OACE,gCACE,sBAAKV,UAAU,6DAAf,UACE,cAAC,EAAD,KACEO,GACA,wBAAQI,QAAS,kBAAIH,GAAWD,IAASP,UAAU,oDAAnD,2BAKJ,qBAAKA,UAAU,kCAAf,SACGO,GACC,gCACG,IACD,oBAAIP,UAAU,oCAAd,6DAGA,sBAAKA,UAAU,sEAAf,UACE,uBACEY,SAzBO,SAACC,GACpBA,EAAEC,iBA1BFC,IACGC,KACC,UACA,CACEC,QAASR,EAASS,QAAQC,OAE5B,CACEC,QAAS,CACP,eAAgB,sBAIrBC,MAAK,SAACC,GACLlB,EAAekB,EAASC,KAAKC,OACD,IAAxBF,EAASC,KAAKC,MAChBlB,EAAW,wCAEXA,EAAW,OAGdmB,OAAM,SAACC,GACNpB,EAAW,qBACXF,EAAe,MAOnBK,EAASS,QAAQC,MAAQ,IAsBbQ,OAAO,OACP3B,UAAU,iCAHZ,UAKE,uBACE4B,IAAKnB,EACLoB,KAAK,UACL7B,UAAU,iBAEZ,wBAAQA,UAAU,kBAAlB,sBAGF,sBAAKA,UAAU,iCAAf,UACmB,IAAhBG,EACC,qBAAIH,UAAU,oCAAd,8BACoBG,KAGpB,oBAAIH,UAAU,oCAAd,SACGK,IAGL,wBAAQL,UAAU,yBAAyBW,QAAS,kBAAIH,GAAWD,IAAnE,kCC5EhBuB,IAASC,OACL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.401f4164.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const Explain = () => {\n  return (\n    <div className=\"m-5\">\n      \n      <div className=\"card text-dark bg-light mb-3\">\n          <div className=\"card-header\"><h2>Explaining Algorithm</h2></div>\n          <div className=\"card-body\">\n\n            <p className=\"card-text\">\n            To solve this challenge I decided to go through the list and calls a\n            function twice, this functions receives an array, so in the first call\n            this array receives an array, from the firsts element in the original\n            array until the element that belongs to the actual position of the\n            iteration, and in the second call from the next element of the actual\n            iteration until the last element in the array, this function takes the\n            array and returns the sum of its elements, with that twice calls we\n            get two numbers that represent the sum of the left and right sides of\n            the actual index, after that, the values are compared, if these values\n            are equals means the sum of both sides are equal so breaks the loop\n            and returns the actual index.\n            </p>\n\n          </div>\n      </div>\n    </div>\n  );\n};\n","import React, { createRef, useState } from \"react\";\nimport axios from \"axios\";\nimport { Explain } from \"./Explain\";\n\nconst Algorithm = () => {\n  const [numberFound, setNumberFound] = useState(0);\n  const [message, setMessage] = useState(\"\");\n  const [choice, setChoice] = useState(false);\n  const arrayRef = createRef();\n  const communicateServer = () => {\n    axios\n      .post(\n        \"/api/hi\",\n        {\n          numbers: arrayRef.current.value,\n        },\n        {\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n        }\n      )\n      .then((response) => {\n        setNumberFound(response.data.index);\n        if (response.data.index === 0) {\n          setMessage(\"No number that satisfy the condition\");\n        } else {\n          setMessage(\"\");\n        }\n      })\n      .catch((error) => {\n        setMessage(\"Check your input!\");\n        setNumberFound(0);\n      });\n  };\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    communicateServer();\n\n    arrayRef.current.value = \"\";\n  };\n  return (\n    <div>\n      <div className=\"mb-2 gap-2 col-8 mx-auto animate__animated animate__fadeIn\">\n        <Explain />\n        {!choice && (\n          <button onClick={()=>setChoice(!choice)} className=\"btn btn-primary animate__animated animate__fadeIn\">\n            Wanna try?\n          </button>\n        )}\n      </div>\n      <div className=\"mb-3 d-grid gap-2 col-6 mx-auto\">\n        {choice && (\n          <div>\n            {\" \"}\n            <h4 className=\"animate__animated animate__fadeIn\">\n              Introduce a serie of numbers separated by comma\n            </h4>\n            <div className=\"mb-3 d-grid gap-2 col-6 mx-auto animate__animated animate__fadeInUp\">\n              <form\n                onSubmit={handleSubmit}\n                method=\"POST\"\n                className=\"form mb-1 d-grid gap-2 mx-auto\"\n              >\n                <input\n                  ref={arrayRef}\n                  name=\"numbers\"\n                  className=\"form-control\"\n                ></input>\n                <button className=\"btn btn-primary\">Check</button>\n              </form>\n\n              <div className=\"form mb-3 d-grid gap-2 mx-auto\">\n                {numberFound !== 0 ? (\n                  <h3 className=\"animate__animated animate__fadeIn\">\n                    Number found at: {numberFound}\n                  </h3>\n                ) : (\n                  <h4 className=\"animate__animated animate__fadeIn\">\n                    {message}\n                  </h4>\n                )}\n                <button className=\"btn btn-outline-danger\" onClick={()=>setChoice(!choice)}>Close</button>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Algorithm;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Algorithm from './components/Algorithm';\n\n\n\nReactDOM.render(\n    <Algorithm />,\n\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}